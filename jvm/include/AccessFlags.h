#ifndef ACCESS_FLAGS_H
#define ACCESS_FLAGS_H

#include <string>

/* method and field access flags*/
#define ACC_PUBLIC    0x0001 //may be accessed from outside its package.
#define ACC_PRIVATE   0x0002 //usable only within the defining class.
#define ACC_PROTECTED 0x0004 //may be accessed within subclasses.
#define ACC_STATIC    0x0008 
#define ACC_FINAL     0x0010 //never directly assigned to after object construction (JLS ยง17.5).
#define ACC_SYNCHRONIZED 0x0020 //method only. invocation is wrapped by a monitor use.
#define ACC_VOLATILE  0x0040 //field only. cannot be cached.
#define ACC_TRANSIENT 0x0080 //field only. not written oread by a persistent object manager.
#define ACC_BRIDGE    0x0040 //method only. generated by the compiler.
#define ACC_VARARGS   0x0080 //method only. Declared with variable number of arguments.
#define ACC_NATIVE    0x0100 //method only. implemented in a language other than Java.
#define ACC_ABSTRACT  0x0400 //method only. no implementation is provided.
#define ACC_STRICT    0x0800 //method only. floating-point mode is FP-strict.
#define ACC_SYNTHETIC 0x1000 //not present in the source code.
#define ACC_ENUM      0x4000 

inline std::string access_flag_lebel(int access_flag)
{
 std::string access = "";
 if (access_flag & ACC_PUBLIC)
   access += "ACC_PUBLIC ";
 if (access_flag & ACC_PRIVATE)
   access += "ACC_PRIVATE ";
 if (access_flag & ACC_PROTECTED)
   access += "ACC_PROTECTED ";
 if (access_flag & ACC_STATIC)
   access += "ACC_STATIC ";
 if (access_flag & ACC_FINAL)
   access += "ACC_FINAL ";
 if (access_flag & ACC_VOLATILE)
   access += "ACC_PUBLIC ";
 if (access_flag & ACC_VOLATILE)
   access += "ACC_VOLATILE ";
 if (access_flag & ACC_ABSTRACT)
   access += "ACC_ABSTRACT ";
 if (access_flag & ACC_ENUM)
   access += "ACC_ENUM ";
 return access;
};

#endif



