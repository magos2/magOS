##### QEMU & GDB ########
- http://wiki.osdev.org/Kernel_Debugging
- Notes importantes
   - to debug real mode : 'set arch i386' in gdb
   - breakpoints dont work properly if  base address(in GDT) is not 0x0(see head.S). You can do 'break *0xc0001234' but...
   - Access console Qemu : Esc+2 and Esc+1 au lieu de Ctl+Alt+1 ou 2. 
   - Access au registers GDTR,CR0,.... Acceder a la console Qemu puis tapper "info registers"
- Peripherals simulated by QEMU PC System emulator:
  http://wiki.qemu.org/download/qemu-doc.html Ch.3
  
- Install qemu on Debian, but il may be old version
  # apt-get install qemu
  
- Qemu build from sources
  # Install preq packages
    apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ncurses-dev libncurses5-dev libncursesw5-dev
  # get code
    git clone --depth 1 git://git.qemu-project.org/qemu.git
  # mkdir /opt/qemu
  # cd /src/qemu
  # ./configure --enable-debug --disable-kvm --enable-curses --prefix=/opt/qemu --target-list="i386-softmmu" --disable-vnc
  # make -j4
  # make install
  
- Compiler avec "-g" , puis generer .bin a partir .elf(voir le Makefile): 
	objcopy -O binary  kernel.elf kernel.bin
- gdb config
  cp munix/gdbinit.txt ~/.gdbinit
- to debug real mode code, [set architecture i8086]
  cp munix/gdbinit_real_mode.txt ~/.gdbinit
-  
 # ./qemu-system-i386 -s -S /logiciels/floppyA.img -no-fd-bootchk
  -s equivalenta-gdb tcp::1234

# gdb
 (gdb) target remote localhost:1234
 (gdb) set architecture i8086     #only to debug real mode code
 (gdb) symbol-file kernel.elf
       b init_gdt
       b *0x1000
       b main.c:63
       b *0xC0001234     - ne fois active la pagination (PAGE_OFFSET=0xC0000000), sinon qemu ne break pas
       info breakpoints
       advance *0x1046   - advance execute to adr/label
       n
       ni   - next asm instr
       si   - step in 
       x/Nx addr  - Dump in hex N words starting at virtual address addr. 
       x/Ni addr  - display N intr assembler
       xp/Nx paddr  - physical addr
       x/x $eip
       x/10i $eip  - dump 10 asm instruct from current eip(Useful)
       x/10i 0x90000
       disas  $eip,+100   - disassemble 100 instruction at eip
       x/5x $esp   - inspecter la pile 
       x/x &pgt0   - si "x/x pgt" ne montre rien
       disas       - show current asm instrs
       info symbol  swapper_pg_dir      - essayer &
       info symbol  &swapper_pg_dir
       x/10x &swapper_pg_dir
       list
       info reg      //dump all registers
       info reg esp
       info mem
       info pg
       where ou bt(backtrace)
       display 	  	- affiche la valeur d'une expression à chaque arrêt du programme
       undisplay
- Debug real mode
  /!\ apres la command "cont" if faut faire  "delete", afin de supprimer le breakpoint
      car gdb se bloque et "ni" ne le fait plus avancer!!!. apres on peut creer un new break, mais il
      faut le supprimer aussi apres "cont".
  (gdb) set architecture i8086     #only to debug real mode code
  (gdb) b *0x7c00
        hb *0x90219   //hard break, if softbreak dont work
        x/10i $cs*16+$eip   //to dump the code at the PC position.
        ni
        
- Executer les commandes a partir d'un ficher
 gdb -x gdb.cmd
 
- objcopy :  is part of the GNU binutils package
   objcopy --only-keep-debug kernel.elf kernel.sym
   objcopy --strip-debug kernel.elf
   objcopy -O binary kernel.elf kernel.bin
  (gdb) symbol-file kernel.elf     

- chercher une aide par keyword
  (gdb) apropos myword

- call a function in gdb
  gdb$ p/x *find_task(1)
  we can also do:
  gdb$ call find_task(1)
  $1 = (task_t *) 0xc1fdb000
  gdb$ p *$1

- make gdb save history
  Create a file $HOME/.gdbinit with the following content:
    set history save
    
- Quit without confirm prompt
Edit ~/.gdbinit with:
  define hook-quit
    set confirm off
  end

- gdb; passe argument to programm
  gdb --args progfile arg1 arg2

** debug with gdb and gdbserver
  run gdbserver:
    # gdbserver [localhost]:1234 mm_test.bin
  run gdb:
    # gdb --directory=/path/to/src /usr/magOS/bin/test/mm_test.bin
      (gdb) target remote localhost:1234
      (gdb) b main
      (gdb) c
  you can use this:
    # gdb --directory=/magOS/mm /magOS/bin/test/mm_test.bin -ex="target remote localhost:1234"
