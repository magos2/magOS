######### AT&T vs Intel Synstax ######
-- Prefixes.
Intex Syntax      AT&T Syntax
mov eax,1         movl $1,%eax
mov ebx,0ffh      movl $0xff,%ebx
int 80h           int  $0x80

-- Direction of Operands.
Intex Syntax         AT&T Syntax
instr  dest,source   instr source,dest
mov eax,[ecx]        movl (%ecx),%eax

-- Memory Operands
Intex Syntax      AT&T Syntax
mov  eax,[ebx]    movl (%ebx),%eax
mov  eax,[ebx+3]  movl 3(%ebx),%eax

Intel Syntax                                 AT&T Syntax
instr dest, [base+index*scale+disp]          instr disp(base,index,scale),dest
mov  eax,[ebx+20h]                           movl  0x20(%ebx),%eax
add  eax,[ebx+ecx*2]                         addl  (%ebx,%ecx,2),%eax
lea  eax,[ebx+ecx]                           leal  (%ebx,%ecx),%eax
sub  eax,[ebx+ecx*4h-20h]                    subl  -0x20(%ebx,%ecx,0x4),%eax

-- in AT&T 'movl $foo,%eax' puts the address of variable foo into register %eax , 
   but 'movl foo,%eax' puts the contents of variable foo into register %eax .

-- Suffixes.
Intel Syntax                 AT&T Syntax
mov al,bl                    movb %bl,%al
mov ax,bx                    movw %bx,%ax
mov eax,ebx                  movl %ebx,%eax
mov eax, dword ptr [ebx]     movl (%ebx),%eax

######## Notes ASM - x86 #########
MOV :
   att_syntax examples:
      mov $label, %eax  ; mov addresse label in eax
      movl $56, 12(%ebx, %ecx, 4) ; [ebx+12+ecx*4]=56 
      
TEST : test r/m r/imm
   Computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand) 
   and sets the SF, ZF, and PF status flags according to the result. 
   test eax, eax   ; set ZF to 1 if eax == 0
   jz .error  ; jump if ZF == 1
   
MOVSB : Move byte at address DS:(E)SI to address ES:(E)DI. if df==0 esi++; edi++

LODS : load string
   LODSB :	Load byte at address DS:(E)SI into AL. if df==0 esi++
STOS : store string
   STOSB :	store xAL at address DS:(E)DI. if df==0 edi++
REP : Repeat String Operation
   REP MOVSB : Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].
   REP OUTS DX, r/m8 : 	Output (E)CX bytes from DS:[(E)SI] to port DX.
   REP LODS EAX	: Load (E)CX doublewords from DS:[(E)SI] to EAX.
   REP STOSB	: Fill (E)CX bytes at ES:[(E)DI] with AL.
   REPE CMPSB :	Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI].
   REPE SCAS m8	: Find non-AL byte starting at ES:[(E)DI].
   REPNE CMPS m32, m32	: Find matching doublewords in ES:[(E)DI] and DS:[(E)SI].
   REPNE SCAS m8	: Find AL, starting at ES:[(E)DI].

JCC : jump if a condition is met
   condition      unsigned     signed      Flags
      =           je, jz       je, jz      ZF=1 
      !=          jne, jnz     jne, jnz    ZF=0
      <,<=        jb, jbe      jl, jle     CF=1 for usigned, SF!=OF for signed   
      >,>=        ja, jae      jg, jge     CF=0 for usigned, SF=OF for signed

CMP : 'cmp destination, source', make 'destination - source' and set flags
    Examples
    cmp    ax, 78h
    jg     short loc_402B1D    ; if ax > 78h, jump to loc_402B1D
   
OFFSET
   mov edi, offset swapper_pg_dir
LEA : Load Effective address
   lea eax, var1
LEAVE : is equivalent to, in Intel syntax:
   mov esp, ebp
   pop ebp

################# Methode de programmation assembleur ###############
| x=a-b+c
asm:
  mov eax, a
  sub eax, b
  add eax, c
  mov x, eax
  
-- IF --
int x = ...;
if (x == 5) {
   x = x + 2;
} else {
    x = x â 4;
}
--> translated to asm
if:
    cmpl eax, $5
    jne else
    addl eax, $2
    jmp fin_if
else:
    subl eax, $4
fin_if:	

| IF ( a==5 AND b>10) THEN
|   action-then
| ELSE
|   action-else
| END-IF
Translated to:
if (a==5) then
   if (b>10) then
      action-then
   else JMP action-else 
else
   action-else
endif
Pseudo asm:
 cmp a, 5
 jne .else
 cmp b, 10
 jle .else
 action-then
 jmp .endif
.else:
 action-else
.endif:

| IF ( a==5 OR b>10) THEN
|   action-then
| ELSE
|   action-else
| END-IF
-->
if a==5 then
  jmp action-then
else
  if b>10 then
    action-then
  else
    action-else
  endif
endif
--> asm
  cmp a, 5
  jne .else
  jmp .action-then
.else:
  cmp b, 10
  jle .action-else
.action-then:
  action-then
  jmp .end-if
.action-else:
  action-else
.endif      
    
-- WHILE --
int x = ...;
while (x > 5) {
    x = x - 1;
}
while:
    cmpl eax, $5
    jle fin_while
    subl eax, $1
    jmp while
fin_while:

-- FOR --
int x = ...;
for (i = 0; i < 5; i++) {
    x = x + 4;
}
    movl ecx, $0
for:
    cmpl ecx, $5
    jae fin_for
    addl eax, $4
    inc ecx
    jmp for
fin_for:

int idt[256];
for (i = 0; i < 256; i++) {
    idt[i] = 5;
}
   mov ecx, 0
   mov edi, offset idt
for_each_idt:
   mov [edi+ecx*4], 5
   inc ecx
   cmp ecx, 256
   jb for_each_idt
   suite instrs

--- ARRAY : TABLEAUX ---
int array[256];
|for (i=0; i<256; i++)
|  array[i] = var1;
-->
   mov eax, var1
   mov ecx, 255
   mov edi, offset array #ou lea edi, array
for_each_el:
   mov [edi+ecx*4], eax
   loop for_each_el
   


######## Notes ASM - ARM v7#########
## Registers
- R0 to R3 : The first four arguments are passed in R0-R3. Any subsequent arguments are passed on the stack.
             The return value, if any, is passed back in R0-R3. Typically only R0 is used.
- R4 to R11 : used to hold local variables.
- IP/R12 : 
- SP/r13 : Stack pointer
- LR/r14 : Link register which holds the callers?s return address.
- PC/r15 : program counter
- CPSR : current program status register


## ARM is a load-store architecture:
  You must load values into registers in order to operate upon them.
  No instructions directly operate on values in memory.

## Instructions Set
- MOV dst, src
  MOV r0, #42   ; r0 = 42 
  MOV r2, r3    ; r2 = r3
    
- Addressing Modes
  LDR r0,[r1,#20]     ;loads r0 with the word pointed at by r1+20
  LDR r0, [r1, #4]!   ; r0 = [r1+4]; then r1 += 4
  LDR r0, [r1], #4    ; r0 = [r1]; then r1 += 4
  LDR r0, [pc, #24]   ; r0 = [pc+24], called pc relative addressing mode. pc/r15   
  
  STR r2, [r3]	 ; [r3] = r2 
  STR r0, [r1],#4  ; [r1] = r0; then Increment R1 by 4.

- ADD  dest, op1, op2     ; dest = op1 + op2
  ADD  R0, R1, R2         ; R0 = R1 + R2
  ADD  R0, R1, #256       ; R0 = R1 + 256
  
- Branch
  B - Branch
    PC := <address>
  BL - Branch with Link
    R14 := address of next instruction, PC := <address>
examples:
  B fwd          ; jump to label 'fwd'
    ...            ; more code here
  fwd

Using BL to call a subroutine:
    BL  calc       ; call 'calc'
    ...            ; returns to here
    calc               ; function body
    ADD r0, r1, r2 ; do some work here
    MOV pc, r14    ; PC = R14 to retu

- add ip, pc, #0, 12 ; equiv "mov ip, pc"

## Doc ARM
- http://www.davespace.co.uk/arm/introduction-to-arm/movement.html